program BasicTests{
    int az = 10;

    /* Class for handling arrays and matrices */
    private class Matrix{
        int z = 0 + 2 + 2;

        func void matMul(){
            int arrA[3][3], arrB[3][3];
            int lenA = 3;
            int lenB = 3;
            int lenC = 3;
            int lenD = 3;

            int i, j;
            i = 0;
            j = 0;

            loop(i < lenA){
                loop(j < lenB){
                    arrA[i][j] = (i * lenB) + (j + 1);
                    arrB[i][j] = (i * lenB) + (j + 1);
                    j = 1 + j;
                }
                j = 0;
                i = i + 1;
            }

            i = 0;

            int arrC[4][5];

            loop(i < lenA){
                loop(j < lenB){
                    arrC[i][j] = arrA[i][j] * arrB[i][j];
                    j = 1 + j;
                }
                j = 0;
                i = i + 1;
            }

            i = 0;

            loop(i < lenA){
                loop(j < lenB){
                    print(arrC[i][j] + "");
                    j = 1 + j;
                }
                j = 0;
                i = i + 1;
            }
        }

        func void sort(){
            int arr[10];
            arr[0] = 2;
            arr[1] = 5;
            arr[2] = 7;
            arr[3] = 4;
            arr[4] = 3;
            arr[5] = 1;
            arr[6] = 9;
            arr[7] = 10;
            arr[8] = 8;
            arr[9] = 6;

            int i = 0;

            loop(i < 10){
                int j = i + 1;
                int min = arr[i];

                loop(j < 10){
                    if(min > arr[j]){
                        int temp;

                        temp = arr[i];

                        arr[i] = arr[j];

                        arr[j] = temp;

                        min = arr[i];
                    }
                    j = j + 1;
                }

                i = i + 1;
            }

            i = 0;

            loop(i < 10){
                print(arr[i]+"");
                i = i + 1;
            }
        }

        func int find(int a){
            int arr[10];
            arr[0] = 2;
            arr[1] = 5;
            arr[2] = 7;
            arr[3] = 4;
            arr[4] = 3;
            arr[5] = 1;
            arr[6] = 9;
            arr[7] = 10;
            arr[8] = 8;
            arr[9] = 6;

            int i = 0;
            int ind = 0 - 1;

            bool notFound = true;

            loop(i < 10 and notFound){
                if(arr[i] == a){
                    notFound = false;
                    ind = i;
                }
                i = i + 1;
            }

            return ind;
        }
    }

    /* Class for handling N term in fibonacci sequence,
        using linear and recursive approaches */
    private class Fibonacci{
        int omega = 0;

        func int fibLinear(int a){
            int res;
            int fib = 0;
            int fibNext = 1;

            if(a == 0){
                res = a;
            }
            else{
                if(a == 1){
                    res = 1;
                }
                else{
                    int i = 1;

                    loop(i < a){
                        int temp = fibNext;
                        fibNext = fib + fibNext;
                        fib = temp;
                        i = i + 1;
                    }

                    res = fibNext;
                }
            }

            return res;
        }

        func int fibRecursive(int a){
            int res;

            if(a == 0){
                res = 0;
            }else{
                if(a == 1){
                    res = 1;
                }
                else{
                    res = fibRecursive(a - 1) + fibRecursive(a - 2);
                }
            }
            return res;
        }
    }

    /* Class for factorial calculation,
        using linear and recursive approaches */
    private class Factorial{
        func int factorialLinear(int a){
            int res = 1;

            int i = 1;

            loop(i < a + 1){
                res = res * i;
                i = i + 1;
            }

            return res;
        }

        func int factorial(int a){
            int res = 0;
            if(a == 0){
                res = 1;
            }else{
                res = a * factorial(a - 1);
            }
            return res;
        }
    }

    /* MAIN */

    main(){
        Matrix mat;
        Fibonacci fib;
        Factorial fact;

        mat.sort();

        print("");

        mat.matMul();

        print("");

        print("Index of number " + az + " is: " + mat.find(az));

        print("");

        print("Fibonacci Linear: " + fib.fibLinear(6));

        print("");

        print("Fibonacci Recursive: " + fib.fibRecursive(5));

        print("");

        int f_lin, f_rec;

        print("Input number for factorial recursive: ");
        read(f_rec);

        print("Input number for factorial linear: ");
        read(f_lin);

        print("");

        int x = fact.factorial(f_rec);
        int y = fact.factorialLinear(f_lin);

        print("Factorial Recursive: " + x);

        print("");

        print("Factorial Linear: " + y);
    }
}